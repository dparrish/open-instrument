// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "openinstrument.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace openinstrument {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LogMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamVariable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamVariable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamVariable_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamMutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMutation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMutation_SampleType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamAggregation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamAggregation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamAggregation_AggregateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreFileHeaderIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreFileHeaderIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactionLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactionLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreFileHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreFileHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreFileFooter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreFileFooter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetentionPolicyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetentionPolicyItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RetentionPolicyItem_Target_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RetentionPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetentionPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StoreServer_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_openinstrument_2eproto() {
  protobuf_AddDesc_openinstrument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "openinstrument.proto");
  GOOGLE_CHECK(file != NULL);
  LogMessage_descriptor_ = file->message_type(0);
  static const int LogMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, message_),
  };
  LogMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogMessage_descriptor_,
      LogMessage::default_instance_,
      LogMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogMessage));
  Label_descriptor_ = file->message_type(1);
  static const int Label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, value_),
  };
  Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Label_descriptor_,
      Label::default_instance_,
      Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Label));
  StreamVariable_descriptor_ = file->message_type(2);
  static const int StreamVariable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariable, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariable, type_),
  };
  StreamVariable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamVariable_descriptor_,
      StreamVariable::default_instance_,
      StreamVariable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamVariable));
  StreamVariable_ValueType_descriptor_ = StreamVariable_descriptor_->enum_type(0);
  StreamMutation_descriptor_ = file->message_type(3);
  static const int StreamMutation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMutation, sample_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMutation, sample_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMutation, max_gap_interpolate_),
  };
  StreamMutation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMutation_descriptor_,
      StreamMutation::default_instance_,
      StreamMutation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMutation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMutation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMutation));
  StreamMutation_SampleType_descriptor_ = StreamMutation_descriptor_->enum_type(0);
  StreamAggregation_descriptor_ = file->message_type(4);
  static const int StreamAggregation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAggregation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAggregation, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAggregation, sample_interval_),
  };
  StreamAggregation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamAggregation_descriptor_,
      StreamAggregation::default_instance_,
      StreamAggregation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAggregation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAggregation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamAggregation));
  StreamAggregation_AggregateType_descriptor_ = StreamAggregation_descriptor_->enum_type(0);
  Value_descriptor_ = file->message_type(5);
  static const int Value_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, end_timestamp_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
  ValueStream_descriptor_ = file->message_type(6);
  static const int ValueStream_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueStream, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueStream, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueStream, mutation_),
  };
  ValueStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValueStream_descriptor_,
      ValueStream::default_instance_,
      ValueStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValueStream));
  GetRequest_descriptor_ = file->message_type(7);
  static const int GetRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, min_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, max_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, mutation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, aggregation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, max_variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, forwarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, max_values_),
  };
  GetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRequest));
  GetResponse_descriptor_ = file->message_type(8);
  static const int GetResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, timer_),
  };
  GetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetResponse));
  AddRequest_descriptor_ = file->message_type(9);
  static const int AddRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequest, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequest, forwarded_),
  };
  AddRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRequest_descriptor_,
      AddRequest::default_instance_,
      AddRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRequest));
  AddResponse_descriptor_ = file->message_type(10);
  static const int AddResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponse, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponse, timer_),
  };
  AddResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddResponse_descriptor_,
      AddResponse::default_instance_,
      AddResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddResponse));
  ListRequest_descriptor_ = file->message_type(11);
  static const int ListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, max_variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, max_age_),
  };
  ListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRequest_descriptor_,
      ListRequest::default_instance_,
      ListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRequest));
  ListResponse_descriptor_ = file->message_type(12);
  static const int ListResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, timer_),
  };
  ListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListResponse_descriptor_,
      ListResponse::default_instance_,
      ListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListResponse));
  StoreFileHeaderIndex_descriptor_ = file->message_type(13);
  static const int StoreFileHeaderIndex_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, num_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, min_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, max_timestamp_),
  };
  StoreFileHeaderIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreFileHeaderIndex_descriptor_,
      StoreFileHeaderIndex::default_instance_,
      StoreFileHeaderIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeaderIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreFileHeaderIndex));
  CompactionLog_descriptor_ = file->message_type(14);
  static const int CompactionLog_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, old_streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, old_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, log_streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, log_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, out_streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, out_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, input_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, output_filename_),
  };
  CompactionLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactionLog_descriptor_,
      CompactionLog::default_instance_,
      CompactionLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactionLog));
  StoreFileHeader_descriptor_ = file->message_type(15);
  static const int StoreFileHeader_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, footer_position_),
  };
  StoreFileHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreFileHeader_descriptor_,
      StoreFileHeader::default_instance_,
      StoreFileHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreFileHeader));
  StoreFileFooter_descriptor_ = file->message_type(16);
  static const int StoreFileFooter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileFooter, compaction_log_),
  };
  StoreFileFooter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreFileFooter_descriptor_,
      StoreFileFooter::default_instance_,
      StoreFileFooter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileFooter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFileFooter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreFileFooter));
  RetentionPolicyItem_descriptor_ = file->message_type(17);
  static const int RetentionPolicyItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, mutation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, min_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, max_age_),
  };
  RetentionPolicyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetentionPolicyItem_descriptor_,
      RetentionPolicyItem::default_instance_,
      RetentionPolicyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetentionPolicyItem));
  RetentionPolicyItem_Target_descriptor_ = RetentionPolicyItem_descriptor_->enum_type(0);
  RetentionPolicy_descriptor_ = file->message_type(18);
  static const int RetentionPolicy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicy, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicy, interval_),
  };
  RetentionPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetentionPolicy_descriptor_,
      RetentionPolicy::default_instance_,
      RetentionPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetentionPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetentionPolicy));
  StoreServer_descriptor_ = file->message_type(19);
  static const int StoreServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, last_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, target_indexed_file_size_),
  };
  StoreServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreServer_descriptor_,
      StoreServer::default_instance_,
      StoreServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreServer));
  StoreServer_State_descriptor_ = StoreServer_descriptor_->enum_type(0);
  StoreConfig_descriptor_ = file->message_type(20);
  static const int StoreConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreConfig, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreConfig, retention_policy_),
  };
  StoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreConfig_descriptor_,
      StoreConfig::default_instance_,
      StoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_openinstrument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogMessage_descriptor_, &LogMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Label_descriptor_, &Label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamVariable_descriptor_, &StreamVariable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMutation_descriptor_, &StreamMutation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamAggregation_descriptor_, &StreamAggregation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValueStream_descriptor_, &ValueStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRequest_descriptor_, &AddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddResponse_descriptor_, &AddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRequest_descriptor_, &ListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListResponse_descriptor_, &ListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreFileHeaderIndex_descriptor_, &StoreFileHeaderIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactionLog_descriptor_, &CompactionLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreFileHeader_descriptor_, &StoreFileHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreFileFooter_descriptor_, &StoreFileFooter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetentionPolicyItem_descriptor_, &RetentionPolicyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetentionPolicy_descriptor_, &RetentionPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreServer_descriptor_, &StoreServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreConfig_descriptor_, &StoreConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_openinstrument_2eproto() {
  delete LogMessage::default_instance_;
  delete LogMessage_reflection_;
  delete Label::default_instance_;
  delete Label_reflection_;
  delete StreamVariable::default_instance_;
  delete StreamVariable_reflection_;
  delete StreamMutation::default_instance_;
  delete StreamMutation_reflection_;
  delete StreamAggregation::default_instance_;
  delete StreamAggregation_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete ValueStream::default_instance_;
  delete ValueStream_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete AddRequest::default_instance_;
  delete AddRequest_reflection_;
  delete AddResponse::default_instance_;
  delete AddResponse_reflection_;
  delete ListRequest::default_instance_;
  delete ListRequest_reflection_;
  delete ListResponse::default_instance_;
  delete ListResponse_reflection_;
  delete StoreFileHeaderIndex::default_instance_;
  delete StoreFileHeaderIndex_reflection_;
  delete CompactionLog::default_instance_;
  delete CompactionLog_reflection_;
  delete StoreFileHeader::default_instance_;
  delete StoreFileHeader_reflection_;
  delete StoreFileFooter::default_instance_;
  delete StoreFileFooter_reflection_;
  delete RetentionPolicyItem::default_instance_;
  delete RetentionPolicyItem_reflection_;
  delete RetentionPolicy::default_instance_;
  delete RetentionPolicy_reflection_;
  delete StoreServer::default_instance_;
  delete StoreServer_reflection_;
  delete StoreConfig::default_instance_;
  delete StoreConfig_reflection_;
}

void protobuf_AddDesc_openinstrument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024openinstrument.proto\022\024openinstrument.p"
    "roto\"0\n\nLogMessage\022\021\n\ttimestamp\030\001 \001(\004\022\017\n"
    "\007message\030\002 \001(\t\"%\n\005Label\022\r\n\005label\030\001 \002(\t\022\r"
    "\n\005value\030\002 \001(\t\"\267\001\n\016StreamVariable\022\014\n\004name"
    "\030\001 \002(\t\022*\n\005label\030\002 \003(\0132\033.openinstrument.p"
    "roto.Label\022<\n\004type\030\003 \001(\0162..openinstrumen"
    "t.proto.StreamVariable.ValueType\"-\n\tValu"
    "eType\022\013\n\007UNKNOWN\020\000\022\t\n\005GAUGE\020\001\022\010\n\004RATE\020\002\""
    "\371\001\n\016StreamMutation\022D\n\013sample_type\030\001 \002(\0162"
    "/.openinstrument.proto.StreamMutation.Sa"
    "mpleType\022\030\n\020sample_frequency\030\002 \001(\r\022\036\n\023ma"
    "x_gap_interpolate\030\003 \001(\r:\0011\"g\n\nSampleType"
    "\022\010\n\004NONE\020\000\022\013\n\007AVERAGE\020\001\022\007\n\003MAX\020\002\022\007\n\003MIN\020"
    "\003\022\010\n\004RATE\020\004\022\017\n\013RATE_SIGNED\020\005\022\t\n\005DELTA\020\006\022"
    "\n\n\006LATEST\020\007\"\314\001\n\021StreamAggregation\022C\n\004typ"
    "e\030\001 \001(\01625.openinstrument.proto.StreamAgg"
    "regation.AggregateType\022\r\n\005label\030\002 \003(\t\022\036\n"
    "\017sample_interval\030\003 \001(\r:\00530000\"C\n\rAggrega"
    "teType\022\013\n\007AVERAGE\020\000\022\007\n\003MAX\020\001\022\007\n\003MIN\020\002\022\n\n"
    "\006MEDIAN\020\003\022\007\n\003SUM\020\004\"\225\001\n\005Value\0226\n\010variable"
    "\030\005 \001(\0132$.openinstrument.proto.StreamVari"
    "able\022\021\n\ttimestamp\030\001 \002(\004\022\024\n\014double_value\030"
    "\002 \001(\001\022\024\n\014string_value\030\003 \001(\t\022\025\n\rend_times"
    "tamp\030\004 \001(\004\"\251\001\n\013ValueStream\0226\n\010variable\030\002"
    " \001(\0132$.openinstrument.proto.StreamVariab"
    "le\022*\n\005value\030\004 \003(\0132\033.openinstrument.proto"
    ".Value\0226\n\010mutation\030\005 \003(\0132$.openinstrumen"
    "t.proto.StreamMutation\"\255\002\n\nGetRequest\0226\n"
    "\010variable\030\t \001(\0132$.openinstrument.proto.S"
    "treamVariable\022\025\n\rmin_timestamp\030\002 \001(\004\022\025\n\r"
    "max_timestamp\030\003 \001(\004\0226\n\010mutation\030\006 \003(\0132$."
    "openinstrument.proto.StreamMutation\022<\n\013a"
    "ggregation\030\007 \003(\0132\'.openinstrument.proto."
    "StreamAggregation\022\025\n\rmax_variables\030\010 \001(\r"
    "\022\030\n\tforwarded\030\n \001(\010:\005false\022\022\n\nmax_values"
    "\030\013 \001(\r\"\230\001\n\013GetResponse\022\017\n\007success\030\001 \002(\010\022"
    "\024\n\014errormessage\030\002 \001(\t\0221\n\006stream\030\003 \003(\0132!."
    "openinstrument.proto.ValueStream\022/\n\005time"
    "r\030\004 \003(\0132 .openinstrument.proto.LogMessag"
    "e\"Y\n\nAddRequest\0221\n\006stream\030\001 \003(\0132!.openin"
    "strument.proto.ValueStream\022\030\n\tforwarded\030"
    "\002 \001(\010:\005false\"e\n\013AddResponse\022\017\n\007success\030\001"
    " \002(\010\022\024\n\014errormessage\030\002 \001(\t\022/\n\005timer\030\003 \003("
    "\0132 .openinstrument.proto.LogMessage\"u\n\013L"
    "istRequest\0224\n\006prefix\030\003 \001(\0132$.openinstrum"
    "ent.proto.StreamVariable\022\025\n\rmax_variable"
    "s\030\002 \001(\r\022\031\n\007max_age\030\004 \001(\004:\01086400000\"\321\001\n\014L"
    "istResponse\022\017\n\007success\030\001 \002(\010\022\024\n\014errormes"
    "sage\030\002 \001(\t\0221\n\006stream\030\003 \003(\0132!.openinstrum"
    "ent.proto.ValueStream\0226\n\010variable\030\004 \003(\0132"
    "$.openinstrument.proto.StreamVariable\022/\n"
    "\005timer\030\005 \003(\0132 .openinstrument.proto.LogM"
    "essage\"\243\001\n\024StoreFileHeaderIndex\0226\n\010varia"
    "ble\030\001 \002(\0132$.openinstrument.proto.StreamV"
    "ariable\022\016\n\006offset\030\002 \002(\006\022\025\n\nnum_values\030\003 "
    "\001(\007:\0010\022\025\n\rmin_timestamp\030\004 \001(\006\022\025\n\rmax_tim"
    "estamp\030\005 \001(\006\"\220\002\n\rCompactionLog\022\022\n\nstart_"
    "time\030\001 \001(\004\022\020\n\010end_time\030\002 \001(\004\022-\n\003log\030\003 \003("
    "\0132 .openinstrument.proto.LogMessage\022\023\n\013o"
    "ld_streams\030\004 \001(\004\022\022\n\nold_values\030\005 \001(\004\022\023\n\013"
    "log_streams\030\006 \001(\004\022\022\n\nlog_values\030\007 \001(\004\022\023\n"
    "\013out_streams\030\010 \001(\004\022\022\n\nout_values\030\t \001(\004\022\026"
    "\n\016input_filename\030\n \003(\t\022\027\n\017output_filenam"
    "e\030\013 \003(\t\"\362\001\n\017StoreFileHeader\022\022\n\007version\030\006"
    " \001(\r:\0011\022\027\n\017start_timestamp\030\001 \001(\004\022\025\n\rend_"
    "timestamp\030\002 \001(\004\0226\n\010variable\030\004 \003(\0132$.open"
    "instrument.proto.StreamVariable\0229\n\005index"
    "\030\005 \003(\0132*.openinstrument.proto.StoreFileH"
    "eaderIndex\022\017\n\007end_key\030\007 \001(\t\022\027\n\017footer_po"
    "sition\030\t \001(\006\"N\n\017StoreFileFooter\022;\n\016compa"
    "ction_log\030\001 \003(\0132#.openinstrument.proto.C"
    "ompactionLog\"\236\002\n\023RetentionPolicyItem\0226\n\010"
    "variable\030\001 \003(\0132$.openinstrument.proto.St"
    "reamVariable\022\017\n\007comment\030\002 \003(\t\022@\n\006policy\030"
    "\003 \002(\01620.openinstrument.proto.RetentionPo"
    "licyItem.Target\0226\n\010mutation\030\004 \003(\0132$.open"
    "instrument.proto.StreamMutation\022\022\n\007min_a"
    "ge\030\005 \001(\004:\0010\022\022\n\007max_age\030\006 \001(\004:\0010\"\034\n\006Targe"
    "t\022\010\n\004KEEP\020\001\022\010\n\004DROP\020\002\"c\n\017RetentionPolicy"
    "\0229\n\006policy\030\001 \003(\0132).openinstrument.proto."
    "RetentionPolicyItem\022\025\n\010interval\030\002 \001(\r:\0036"
    "00\"\354\001\n\013StoreServer\022\017\n\007address\030\001 \002(\t\0226\n\005s"
    "tate\030\002 \001(\0162\'.openinstrument.proto.StoreS"
    "erver.State\022\024\n\014last_updated\030\003 \001(\004\022\014\n\004nam"
    "e\030\005 \001(\t\022 \n\030target_indexed_file_size\030\004 \001("
    "\004\"N\n\005State\022\013\n\007UNKNOWN\020\000\022\010\n\004LOAD\020\001\022\007\n\003RUN"
    "\020\002\022\t\n\005DRAIN\020\003\022\014\n\010READONLY\020\004\022\014\n\010SHUTDOWN\020"
    "\005\"\201\001\n\013StoreConfig\0221\n\006server\030\001 \003(\0132!.open"
    "instrument.proto.StoreServer\022\?\n\020retentio"
    "n_policy\030\002 \001(\0132%.openinstrument.proto.Re"
    "tentionPolicy", 3613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openinstrument.proto", &protobuf_RegisterTypes);
  LogMessage::default_instance_ = new LogMessage();
  Label::default_instance_ = new Label();
  StreamVariable::default_instance_ = new StreamVariable();
  StreamMutation::default_instance_ = new StreamMutation();
  StreamAggregation::default_instance_ = new StreamAggregation();
  Value::default_instance_ = new Value();
  ValueStream::default_instance_ = new ValueStream();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  AddRequest::default_instance_ = new AddRequest();
  AddResponse::default_instance_ = new AddResponse();
  ListRequest::default_instance_ = new ListRequest();
  ListResponse::default_instance_ = new ListResponse();
  StoreFileHeaderIndex::default_instance_ = new StoreFileHeaderIndex();
  CompactionLog::default_instance_ = new CompactionLog();
  StoreFileHeader::default_instance_ = new StoreFileHeader();
  StoreFileFooter::default_instance_ = new StoreFileFooter();
  RetentionPolicyItem::default_instance_ = new RetentionPolicyItem();
  RetentionPolicy::default_instance_ = new RetentionPolicy();
  StoreServer::default_instance_ = new StoreServer();
  StoreConfig::default_instance_ = new StoreConfig();
  LogMessage::default_instance_->InitAsDefaultInstance();
  Label::default_instance_->InitAsDefaultInstance();
  StreamVariable::default_instance_->InitAsDefaultInstance();
  StreamMutation::default_instance_->InitAsDefaultInstance();
  StreamAggregation::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  ValueStream::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  AddRequest::default_instance_->InitAsDefaultInstance();
  AddResponse::default_instance_->InitAsDefaultInstance();
  ListRequest::default_instance_->InitAsDefaultInstance();
  ListResponse::default_instance_->InitAsDefaultInstance();
  StoreFileHeaderIndex::default_instance_->InitAsDefaultInstance();
  CompactionLog::default_instance_->InitAsDefaultInstance();
  StoreFileHeader::default_instance_->InitAsDefaultInstance();
  StoreFileFooter::default_instance_->InitAsDefaultInstance();
  RetentionPolicyItem::default_instance_->InitAsDefaultInstance();
  RetentionPolicy::default_instance_->InitAsDefaultInstance();
  StoreServer::default_instance_->InitAsDefaultInstance();
  StoreConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_openinstrument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_openinstrument_2eproto {
  StaticDescriptorInitializer_openinstrument_2eproto() {
    protobuf_AddDesc_openinstrument_2eproto();
  }
} static_descriptor_initializer_openinstrument_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LogMessage::kTimestampFieldNumber;
const int LogMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

LogMessage::LogMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogMessage::InitAsDefaultInstance() {
}

LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogMessage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMessage::~LogMessage() {
  SharedDtor();
}

void LogMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void LogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMessage_descriptor_;
}

const LogMessage& LogMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

LogMessage* LogMessage::default_instance_ = NULL;

LogMessage* LogMessage::New() const {
  return new LogMessage;
}

void LogMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  
  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMessage_descriptor_;
  metadata.reflection = LogMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Label::kLabelFieldNumber;
const int Label::kValueFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Label::InitAsDefaultInstance() {
}

Label::Label(const Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Label::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  SharedDtor();
}

void Label::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Label::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StreamVariable_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamVariable_ValueType_descriptor_;
}
bool StreamVariable_ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StreamVariable_ValueType StreamVariable::UNKNOWN;
const StreamVariable_ValueType StreamVariable::GAUGE;
const StreamVariable_ValueType StreamVariable::RATE;
const StreamVariable_ValueType StreamVariable::ValueType_MIN;
const StreamVariable_ValueType StreamVariable::ValueType_MAX;
const int StreamVariable::ValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StreamVariable::kNameFieldNumber;
const int StreamVariable::kLabelFieldNumber;
const int StreamVariable::kTypeFieldNumber;
#endif  // !_MSC_VER

StreamVariable::StreamVariable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamVariable::InitAsDefaultInstance() {
}

StreamVariable::StreamVariable(const StreamVariable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamVariable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamVariable::~StreamVariable() {
  SharedDtor();
}

void StreamVariable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StreamVariable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamVariable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamVariable_descriptor_;
}

const StreamVariable& StreamVariable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StreamVariable* StreamVariable::default_instance_ = NULL;

StreamVariable* StreamVariable::New() const {
  return new StreamVariable;
}

void StreamVariable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  label_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamVariable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // repeated .openinstrument.proto.Label label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .openinstrument.proto.StreamVariable.ValueType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openinstrument::proto::StreamVariable_ValueType_IsValid(value)) {
            set_type(static_cast< ::openinstrument::proto::StreamVariable_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamVariable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .openinstrument.proto.Label label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->label(i), output);
  }
  
  // optional .openinstrument.proto.StreamVariable.ValueType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamVariable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .openinstrument.proto.Label label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->label(i), target);
  }
  
  // optional .openinstrument.proto.StreamVariable.ValueType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamVariable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .openinstrument.proto.StreamVariable.ValueType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .openinstrument.proto.Label label = 2;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->label(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamVariable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamVariable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamVariable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamVariable::MergeFrom(const StreamVariable& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamVariable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVariable::CopyFrom(const StreamVariable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamVariable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < label_size(); i++) {
    if (!this->label(i).IsInitialized()) return false;
  }
  return true;
}

void StreamVariable::Swap(StreamVariable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    label_.Swap(&other->label_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamVariable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamVariable_descriptor_;
  metadata.reflection = StreamVariable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StreamMutation_SampleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMutation_SampleType_descriptor_;
}
bool StreamMutation_SampleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StreamMutation_SampleType StreamMutation::NONE;
const StreamMutation_SampleType StreamMutation::AVERAGE;
const StreamMutation_SampleType StreamMutation::MAX;
const StreamMutation_SampleType StreamMutation::MIN;
const StreamMutation_SampleType StreamMutation::RATE;
const StreamMutation_SampleType StreamMutation::RATE_SIGNED;
const StreamMutation_SampleType StreamMutation::DELTA;
const StreamMutation_SampleType StreamMutation::LATEST;
const StreamMutation_SampleType StreamMutation::SampleType_MIN;
const StreamMutation_SampleType StreamMutation::SampleType_MAX;
const int StreamMutation::SampleType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StreamMutation::kSampleTypeFieldNumber;
const int StreamMutation::kSampleFrequencyFieldNumber;
const int StreamMutation::kMaxGapInterpolateFieldNumber;
#endif  // !_MSC_VER

StreamMutation::StreamMutation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamMutation::InitAsDefaultInstance() {
}

StreamMutation::StreamMutation(const StreamMutation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamMutation::SharedCtor() {
  _cached_size_ = 0;
  sample_type_ = 0;
  sample_frequency_ = 0u;
  max_gap_interpolate_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMutation::~StreamMutation() {
  SharedDtor();
}

void StreamMutation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamMutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMutation_descriptor_;
}

const StreamMutation& StreamMutation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StreamMutation* StreamMutation::default_instance_ = NULL;

StreamMutation* StreamMutation::New() const {
  return new StreamMutation;
}

void StreamMutation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sample_type_ = 0;
    sample_frequency_ = 0u;
    max_gap_interpolate_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamMutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .openinstrument.proto.StreamMutation.SampleType sample_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openinstrument::proto::StreamMutation_SampleType_IsValid(value)) {
            set_sample_type(static_cast< ::openinstrument::proto::StreamMutation_SampleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sample_frequency;
        break;
      }
      
      // optional uint32 sample_frequency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sample_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_frequency_)));
          set_has_sample_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_gap_interpolate;
        break;
      }
      
      // optional uint32 max_gap_interpolate = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_gap_interpolate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_gap_interpolate_)));
          set_has_max_gap_interpolate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamMutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .openinstrument.proto.StreamMutation.SampleType sample_type = 1;
  if (has_sample_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sample_type(), output);
  }
  
  // optional uint32 sample_frequency = 2;
  if (has_sample_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sample_frequency(), output);
  }
  
  // optional uint32 max_gap_interpolate = 3 [default = 1];
  if (has_max_gap_interpolate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_gap_interpolate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamMutation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .openinstrument.proto.StreamMutation.SampleType sample_type = 1;
  if (has_sample_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sample_type(), target);
  }
  
  // optional uint32 sample_frequency = 2;
  if (has_sample_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sample_frequency(), target);
  }
  
  // optional uint32 max_gap_interpolate = 3 [default = 1];
  if (has_max_gap_interpolate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_gap_interpolate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamMutation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .openinstrument.proto.StreamMutation.SampleType sample_type = 1;
    if (has_sample_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sample_type());
    }
    
    // optional uint32 sample_frequency = 2;
    if (has_sample_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_frequency());
    }
    
    // optional uint32 max_gap_interpolate = 3 [default = 1];
    if (has_max_gap_interpolate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_gap_interpolate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMutation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamMutation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMutation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMutation::MergeFrom(const StreamMutation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_type()) {
      set_sample_type(from.sample_type());
    }
    if (from.has_sample_frequency()) {
      set_sample_frequency(from.sample_frequency());
    }
    if (from.has_max_gap_interpolate()) {
      set_max_gap_interpolate(from.max_gap_interpolate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamMutation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMutation::CopyFrom(const StreamMutation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMutation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StreamMutation::Swap(StreamMutation* other) {
  if (other != this) {
    std::swap(sample_type_, other->sample_type_);
    std::swap(sample_frequency_, other->sample_frequency_);
    std::swap(max_gap_interpolate_, other->max_gap_interpolate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamMutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMutation_descriptor_;
  metadata.reflection = StreamMutation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StreamAggregation_AggregateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamAggregation_AggregateType_descriptor_;
}
bool StreamAggregation_AggregateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StreamAggregation_AggregateType StreamAggregation::AVERAGE;
const StreamAggregation_AggregateType StreamAggregation::MAX;
const StreamAggregation_AggregateType StreamAggregation::MIN;
const StreamAggregation_AggregateType StreamAggregation::MEDIAN;
const StreamAggregation_AggregateType StreamAggregation::SUM;
const StreamAggregation_AggregateType StreamAggregation::AggregateType_MIN;
const StreamAggregation_AggregateType StreamAggregation::AggregateType_MAX;
const int StreamAggregation::AggregateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StreamAggregation::kTypeFieldNumber;
const int StreamAggregation::kLabelFieldNumber;
const int StreamAggregation::kSampleIntervalFieldNumber;
#endif  // !_MSC_VER

StreamAggregation::StreamAggregation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamAggregation::InitAsDefaultInstance() {
}

StreamAggregation::StreamAggregation(const StreamAggregation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamAggregation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sample_interval_ = 30000u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamAggregation::~StreamAggregation() {
  SharedDtor();
}

void StreamAggregation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamAggregation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAggregation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamAggregation_descriptor_;
}

const StreamAggregation& StreamAggregation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StreamAggregation* StreamAggregation::default_instance_ = NULL;

StreamAggregation* StreamAggregation::New() const {
  return new StreamAggregation;
}

void StreamAggregation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    sample_interval_ = 30000u;
  }
  label_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamAggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .openinstrument.proto.StreamAggregation.AggregateType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openinstrument::proto::StreamAggregation_AggregateType_IsValid(value)) {
            set_type(static_cast< ::openinstrument::proto::StreamAggregation_AggregateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // repeated string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label(0).data(), this->label(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        if (input->ExpectTag(24)) goto parse_sample_interval;
        break;
      }
      
      // optional uint32 sample_interval = 3 [default = 30000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sample_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_interval_)));
          set_has_sample_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamAggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .openinstrument.proto.StreamAggregation.AggregateType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated string label = 2;
  for (int i = 0; i < this->label_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->label(i).data(), this->label(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(i), output);
  }
  
  // optional uint32 sample_interval = 3 [default = 30000];
  if (has_sample_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sample_interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamAggregation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .openinstrument.proto.StreamAggregation.AggregateType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated string label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label(i).data(), this->label(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->label(i), target);
  }
  
  // optional uint32 sample_interval = 3 [default = 30000];
  if (has_sample_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sample_interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamAggregation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .openinstrument.proto.StreamAggregation.AggregateType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 sample_interval = 3 [default = 30000];
    if (has_sample_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_interval());
    }
    
  }
  // repeated string label = 2;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->label(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAggregation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamAggregation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamAggregation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamAggregation::MergeFrom(const StreamAggregation& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sample_interval()) {
      set_sample_interval(from.sample_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamAggregation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAggregation::CopyFrom(const StreamAggregation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAggregation::IsInitialized() const {
  
  return true;
}

void StreamAggregation::Swap(StreamAggregation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    label_.Swap(&other->label_);
    std::swap(sample_interval_, other->sample_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamAggregation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamAggregation_descriptor_;
  metadata.reflection = StreamAggregation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Value::kVariableFieldNumber;
const int Value::kTimestampFieldNumber;
const int Value::kDoubleValueFieldNumber;
const int Value::kStringValueFieldNumber;
const int Value::kEndTimestampFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value::InitAsDefaultInstance() {
  variable_ = const_cast< ::openinstrument::proto::StreamVariable*>(&::openinstrument::proto::StreamVariable::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  variable_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  double_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  SharedDtor();
}

void Value::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
    delete variable_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_variable()) {
      if (variable_ != NULL) variable_->::openinstrument::proto::StreamVariable::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    double_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    end_timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_double_value;
        break;
      }
      
      // optional double double_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_timestamp;
        break;
      }
      
      // optional uint64 end_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_)));
          set_has_end_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_variable;
        break;
      }
      
      // optional .openinstrument.proto.StreamVariable variable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }
  
  // optional double double_value = 2;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_value(), output);
  }
  
  // optional string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_value(), output);
  }
  
  // optional uint64 end_timestamp = 4;
  if (has_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_timestamp(), output);
  }
  
  // optional .openinstrument.proto.StreamVariable variable = 5;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->variable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional double double_value = 2;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->double_value(), target);
  }
  
  // optional string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_value(), target);
  }
  
  // optional uint64 end_timestamp = 4;
  if (has_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_timestamp(), target);
  }
  
  // optional .openinstrument.proto.StreamVariable variable = 5;
  if (has_variable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->variable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .openinstrument.proto.StreamVariable variable = 5;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variable());
    }
    
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional double double_value = 2;
    if (has_double_value()) {
      total_size += 1 + 8;
    }
    
    // optional string string_value = 3;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
    // optional uint64 end_timestamp = 4;
    if (has_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_variable()) {
      mutable_variable()->::openinstrument::proto::StreamVariable::MergeFrom(from.variable());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_end_timestamp()) {
      set_end_timestamp(from.end_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_variable()) {
    if (!this->variable().IsInitialized()) return false;
  }
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(variable_, other->variable_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(double_value_, other->double_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(end_timestamp_, other->end_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValueStream::kVariableFieldNumber;
const int ValueStream::kValueFieldNumber;
const int ValueStream::kMutationFieldNumber;
#endif  // !_MSC_VER

ValueStream::ValueStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ValueStream::InitAsDefaultInstance() {
  variable_ = const_cast< ::openinstrument::proto::StreamVariable*>(&::openinstrument::proto::StreamVariable::default_instance());
}

ValueStream::ValueStream(const ValueStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ValueStream::SharedCtor() {
  _cached_size_ = 0;
  variable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValueStream::~ValueStream() {
  SharedDtor();
}

void ValueStream::SharedDtor() {
  if (this != default_instance_) {
    delete variable_;
  }
}

void ValueStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueStream_descriptor_;
}

const ValueStream& ValueStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

ValueStream* ValueStream::default_instance_ = NULL;

ValueStream* ValueStream::New() const {
  return new ValueStream;
}

void ValueStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_variable()) {
      if (variable_ != NULL) variable_->::openinstrument::proto::StreamVariable::Clear();
    }
  }
  value_.Clear();
  mutation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValueStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .openinstrument.proto.StreamVariable variable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // repeated .openinstrument.proto.Value value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        if (input->ExpectTag(42)) goto parse_mutation;
        break;
      }
      
      // repeated .openinstrument.proto.StreamMutation mutation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mutation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValueStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .openinstrument.proto.StreamVariable variable = 2;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variable(), output);
  }
  
  // repeated .openinstrument.proto.Value value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value(i), output);
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 5;
  for (int i = 0; i < this->mutation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mutation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValueStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .openinstrument.proto.StreamVariable variable = 2;
  if (has_variable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->variable(), target);
  }
  
  // repeated .openinstrument.proto.Value value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value(i), target);
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 5;
  for (int i = 0; i < this->mutation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mutation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValueStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .openinstrument.proto.StreamVariable variable = 2;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variable());
    }
    
  }
  // repeated .openinstrument.proto.Value value = 4;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 5;
  total_size += 1 * this->mutation_size();
  for (int i = 0; i < this->mutation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValueStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValueStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValueStream::MergeFrom(const ValueStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutation_.MergeFrom(from.mutation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_variable()) {
      mutable_variable()->::openinstrument::proto::StreamVariable::MergeFrom(from.variable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValueStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueStream::CopyFrom(const ValueStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueStream::IsInitialized() const {
  
  if (has_variable()) {
    if (!this->variable().IsInitialized()) return false;
  }
  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mutation_size(); i++) {
    if (!this->mutation(i).IsInitialized()) return false;
  }
  return true;
}

void ValueStream::Swap(ValueStream* other) {
  if (other != this) {
    std::swap(variable_, other->variable_);
    value_.Swap(&other->value_);
    mutation_.Swap(&other->mutation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValueStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueStream_descriptor_;
  metadata.reflection = ValueStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRequest::kVariableFieldNumber;
const int GetRequest::kMinTimestampFieldNumber;
const int GetRequest::kMaxTimestampFieldNumber;
const int GetRequest::kMutationFieldNumber;
const int GetRequest::kAggregationFieldNumber;
const int GetRequest::kMaxVariablesFieldNumber;
const int GetRequest::kForwardedFieldNumber;
const int GetRequest::kMaxValuesFieldNumber;
#endif  // !_MSC_VER

GetRequest::GetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRequest::InitAsDefaultInstance() {
  variable_ = const_cast< ::openinstrument::proto::StreamVariable*>(&::openinstrument::proto::StreamVariable::default_instance());
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRequest::SharedCtor() {
  _cached_size_ = 0;
  variable_ = NULL;
  min_timestamp_ = GOOGLE_ULONGLONG(0);
  max_timestamp_ = GOOGLE_ULONGLONG(0);
  max_variables_ = 0u;
  forwarded_ = false;
  max_values_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRequest::~GetRequest() {
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete variable_;
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New() const {
  return new GetRequest;
}

void GetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_variable()) {
      if (variable_ != NULL) variable_->::openinstrument::proto::StreamVariable::Clear();
    }
    min_timestamp_ = GOOGLE_ULONGLONG(0);
    max_timestamp_ = GOOGLE_ULONGLONG(0);
    max_variables_ = 0u;
    forwarded_ = false;
    max_values_ = 0u;
  }
  mutation_.Clear();
  aggregation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_timestamp_)));
          set_has_min_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_timestamp;
        break;
      }
      
      // optional uint64 max_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_timestamp_)));
          set_has_max_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mutation;
        break;
      }
      
      // repeated .openinstrument.proto.StreamMutation mutation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mutation;
        if (input->ExpectTag(58)) goto parse_aggregation;
        break;
      }
      
      // repeated .openinstrument.proto.StreamAggregation aggregation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aggregation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aggregation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aggregation;
        if (input->ExpectTag(64)) goto parse_max_variables;
        break;
      }
      
      // optional uint32 max_variables = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_variables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_variables_)));
          set_has_max_variables();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_variable;
        break;
      }
      
      // optional .openinstrument.proto.StreamVariable variable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_forwarded;
        break;
      }
      
      // optional bool forwarded = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forwarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forwarded_)));
          set_has_forwarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_max_values;
        break;
      }
      
      // optional uint32 max_values = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_values_)));
          set_has_max_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 min_timestamp = 2;
  if (has_min_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_timestamp(), output);
  }
  
  // optional uint64 max_timestamp = 3;
  if (has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_timestamp(), output);
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 6;
  for (int i = 0; i < this->mutation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mutation(i), output);
  }
  
  // repeated .openinstrument.proto.StreamAggregation aggregation = 7;
  for (int i = 0; i < this->aggregation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->aggregation(i), output);
  }
  
  // optional uint32 max_variables = 8;
  if (has_max_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_variables(), output);
  }
  
  // optional .openinstrument.proto.StreamVariable variable = 9;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->variable(), output);
  }
  
  // optional bool forwarded = 10 [default = false];
  if (has_forwarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->forwarded(), output);
  }
  
  // optional uint32 max_values = 11;
  if (has_max_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_values(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 min_timestamp = 2;
  if (has_min_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_timestamp(), target);
  }
  
  // optional uint64 max_timestamp = 3;
  if (has_max_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_timestamp(), target);
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 6;
  for (int i = 0; i < this->mutation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mutation(i), target);
  }
  
  // repeated .openinstrument.proto.StreamAggregation aggregation = 7;
  for (int i = 0; i < this->aggregation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->aggregation(i), target);
  }
  
  // optional uint32 max_variables = 8;
  if (has_max_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_variables(), target);
  }
  
  // optional .openinstrument.proto.StreamVariable variable = 9;
  if (has_variable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->variable(), target);
  }
  
  // optional bool forwarded = 10 [default = false];
  if (has_forwarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->forwarded(), target);
  }
  
  // optional uint32 max_values = 11;
  if (has_max_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_values(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .openinstrument.proto.StreamVariable variable = 9;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variable());
    }
    
    // optional uint64 min_timestamp = 2;
    if (has_min_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_timestamp());
    }
    
    // optional uint64 max_timestamp = 3;
    if (has_max_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_timestamp());
    }
    
    // optional uint32 max_variables = 8;
    if (has_max_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_variables());
    }
    
    // optional bool forwarded = 10 [default = false];
    if (has_forwarded()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 max_values = 11;
    if (has_max_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_values());
    }
    
  }
  // repeated .openinstrument.proto.StreamMutation mutation = 6;
  total_size += 1 * this->mutation_size();
  for (int i = 0; i < this->mutation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutation(i));
  }
  
  // repeated .openinstrument.proto.StreamAggregation aggregation = 7;
  total_size += 1 * this->aggregation_size();
  for (int i = 0; i < this->aggregation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aggregation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutation_.MergeFrom(from.mutation_);
  aggregation_.MergeFrom(from.aggregation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_variable()) {
      mutable_variable()->::openinstrument::proto::StreamVariable::MergeFrom(from.variable());
    }
    if (from.has_min_timestamp()) {
      set_min_timestamp(from.min_timestamp());
    }
    if (from.has_max_timestamp()) {
      set_max_timestamp(from.max_timestamp());
    }
    if (from.has_max_variables()) {
      set_max_variables(from.max_variables());
    }
    if (from.has_forwarded()) {
      set_forwarded(from.forwarded());
    }
    if (from.has_max_values()) {
      set_max_values(from.max_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  
  if (has_variable()) {
    if (!this->variable().IsInitialized()) return false;
  }
  for (int i = 0; i < mutation_size(); i++) {
    if (!this->mutation(i).IsInitialized()) return false;
  }
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other != this) {
    std::swap(variable_, other->variable_);
    std::swap(min_timestamp_, other->min_timestamp_);
    std::swap(max_timestamp_, other->max_timestamp_);
    mutation_.Swap(&other->mutation_);
    aggregation_.Swap(&other->aggregation_);
    std::swap(max_variables_, other->max_variables_);
    std::swap(forwarded_, other->forwarded_);
    std::swap(max_values_, other->max_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetResponse::kSuccessFieldNumber;
const int GetResponse::kErrormessageFieldNumber;
const int GetResponse::kStreamFieldNumber;
const int GetResponse::kTimerFieldNumber;
#endif  // !_MSC_VER

GetResponse::GetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetResponse::InitAsDefaultInstance() {
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResponse::~GetResponse() {
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New() const {
  return new GetResponse;
}

void GetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  stream_.Clear();
  timer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errormessage;
        break;
      }
      
      // optional string errormessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream;
        break;
      }
      
      // repeated .openinstrument.proto.ValueStream stream = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream;
        if (input->ExpectTag(34)) goto parse_timer;
        break;
      }
      
      // repeated .openinstrument.proto.LogMessage timer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional string errormessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  // repeated .openinstrument.proto.ValueStream stream = 3;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stream(i), output);
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 4;
  for (int i = 0; i < this->timer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional string errormessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  // repeated .openinstrument.proto.ValueStream stream = 3;
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stream(i), target);
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 4;
  for (int i = 0; i < this->timer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string errormessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  // repeated .openinstrument.proto.ValueStream stream = 3;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 4;
  total_size += 1 * this->timer_size();
  for (int i = 0; i < this->timer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  timer_.MergeFrom(from.timer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < stream_size(); i++) {
    if (!this->stream(i).IsInitialized()) return false;
  }
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    stream_.Swap(&other->stream_);
    timer_.Swap(&other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRequest::kStreamFieldNumber;
const int AddRequest::kForwardedFieldNumber;
#endif  // !_MSC_VER

AddRequest::AddRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRequest::InitAsDefaultInstance() {
}

AddRequest::AddRequest(const AddRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRequest::SharedCtor() {
  _cached_size_ = 0;
  forwarded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRequest::~AddRequest() {
  SharedDtor();
}

void AddRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRequest_descriptor_;
}

const AddRequest& AddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

AddRequest* AddRequest::default_instance_ = NULL;

AddRequest* AddRequest::New() const {
  return new AddRequest;
}

void AddRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    forwarded_ = false;
  }
  stream_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openinstrument.proto.ValueStream stream = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stream;
        if (input->ExpectTag(16)) goto parse_forwarded;
        break;
      }
      
      // optional bool forwarded = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forwarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forwarded_)));
          set_has_forwarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .openinstrument.proto.ValueStream stream = 1;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stream(i), output);
  }
  
  // optional bool forwarded = 2 [default = false];
  if (has_forwarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forwarded(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .openinstrument.proto.ValueStream stream = 1;
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stream(i), target);
  }
  
  // optional bool forwarded = 2 [default = false];
  if (has_forwarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forwarded(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool forwarded = 2 [default = false];
    if (has_forwarded()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .openinstrument.proto.ValueStream stream = 1;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRequest::MergeFrom(const AddRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_forwarded()) {
      set_forwarded(from.forwarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequest::CopyFrom(const AddRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  
  for (int i = 0; i < stream_size(); i++) {
    if (!this->stream(i).IsInitialized()) return false;
  }
  return true;
}

void AddRequest::Swap(AddRequest* other) {
  if (other != this) {
    stream_.Swap(&other->stream_);
    std::swap(forwarded_, other->forwarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRequest_descriptor_;
  metadata.reflection = AddRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddResponse::kSuccessFieldNumber;
const int AddResponse::kErrormessageFieldNumber;
const int AddResponse::kTimerFieldNumber;
#endif  // !_MSC_VER

AddResponse::AddResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddResponse::InitAsDefaultInstance() {
}

AddResponse::AddResponse(const AddResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddResponse::~AddResponse() {
  SharedDtor();
}

void AddResponse::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void AddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddResponse_descriptor_;
}

const AddResponse& AddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

AddResponse* AddResponse::default_instance_ = NULL;

AddResponse* AddResponse::New() const {
  return new AddResponse;
}

void AddResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  timer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errormessage;
        break;
      }
      
      // optional string errormessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timer;
        break;
      }
      
      // repeated .openinstrument.proto.LogMessage timer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional string errormessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 3;
  for (int i = 0; i < this->timer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional string errormessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 3;
  for (int i = 0; i < this->timer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string errormessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  // repeated .openinstrument.proto.LogMessage timer = 3;
  total_size += 1 * this->timer_size();
  for (int i = 0; i < this->timer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddResponse::MergeFrom(const AddResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  timer_.MergeFrom(from.timer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResponse::CopyFrom(const AddResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddResponse::Swap(AddResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    timer_.Swap(&other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddResponse_descriptor_;
  metadata.reflection = AddResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListRequest::kPrefixFieldNumber;
const int ListRequest::kMaxVariablesFieldNumber;
const int ListRequest::kMaxAgeFieldNumber;
#endif  // !_MSC_VER

ListRequest::ListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRequest::InitAsDefaultInstance() {
  prefix_ = const_cast< ::openinstrument::proto::StreamVariable*>(&::openinstrument::proto::StreamVariable::default_instance());
}

ListRequest::ListRequest(const ListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRequest::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = NULL;
  max_variables_ = 0u;
  max_age_ = GOOGLE_ULONGLONG(86400000);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRequest::~ListRequest() {
  SharedDtor();
}

void ListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete prefix_;
  }
}

void ListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRequest_descriptor_;
}

const ListRequest& ListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

ListRequest* ListRequest::default_instance_ = NULL;

ListRequest* ListRequest::New() const {
  return new ListRequest;
}

void ListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prefix()) {
      if (prefix_ != NULL) prefix_->::openinstrument::proto::StreamVariable::Clear();
    }
    max_variables_ = 0u;
    max_age_ = GOOGLE_ULONGLONG(86400000);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_variables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_variables_)));
          set_has_max_variables();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prefix;
        break;
      }
      
      // optional .openinstrument.proto.StreamVariable prefix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_age;
        break;
      }
      
      // optional uint64 max_age = 4 [default = 86400000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_age_)));
          set_has_max_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_variables = 2;
  if (has_max_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_variables(), output);
  }
  
  // optional .openinstrument.proto.StreamVariable prefix = 3;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prefix(), output);
  }
  
  // optional uint64 max_age = 4 [default = 86400000];
  if (has_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_age(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_variables = 2;
  if (has_max_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_variables(), target);
  }
  
  // optional .openinstrument.proto.StreamVariable prefix = 3;
  if (has_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prefix(), target);
  }
  
  // optional uint64 max_age = 4 [default = 86400000];
  if (has_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_age(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .openinstrument.proto.StreamVariable prefix = 3;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prefix());
    }
    
    // optional uint32 max_variables = 2;
    if (has_max_variables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_variables());
    }
    
    // optional uint64 max_age = 4 [default = 86400000];
    if (has_max_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_age());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      mutable_prefix()->::openinstrument::proto::StreamVariable::MergeFrom(from.prefix());
    }
    if (from.has_max_variables()) {
      set_max_variables(from.max_variables());
    }
    if (from.has_max_age()) {
      set_max_age(from.max_age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {
  
  if (has_prefix()) {
    if (!this->prefix().IsInitialized()) return false;
  }
  return true;
}

void ListRequest::Swap(ListRequest* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    std::swap(max_variables_, other->max_variables_);
    std::swap(max_age_, other->max_age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRequest_descriptor_;
  metadata.reflection = ListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListResponse::kSuccessFieldNumber;
const int ListResponse::kErrormessageFieldNumber;
const int ListResponse::kStreamFieldNumber;
const int ListResponse::kVariableFieldNumber;
const int ListResponse::kTimerFieldNumber;
#endif  // !_MSC_VER

ListResponse::ListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListResponse::InitAsDefaultInstance() {
}

ListResponse::ListResponse(const ListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListResponse::~ListResponse() {
  SharedDtor();
}

void ListResponse::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListResponse_descriptor_;
}

const ListResponse& ListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

ListResponse* ListResponse::default_instance_ = NULL;

ListResponse* ListResponse::New() const {
  return new ListResponse;
}

void ListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  stream_.Clear();
  variable_.Clear();
  timer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errormessage;
        break;
      }
      
      // optional string errormessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream;
        break;
      }
      
      // repeated .openinstrument.proto.ValueStream stream = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stream;
        if (input->ExpectTag(34)) goto parse_variable;
        break;
      }
      
      // repeated .openinstrument.proto.StreamVariable variable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        if (input->ExpectTag(42)) goto parse_timer;
        break;
      }
      
      // repeated .openinstrument.proto.LogMessage timer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional string errormessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  // repeated .openinstrument.proto.ValueStream stream = 3;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stream(i), output);
  }
  
  // repeated .openinstrument.proto.StreamVariable variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variable(i), output);
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 5;
  for (int i = 0; i < this->timer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->timer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional string errormessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  // repeated .openinstrument.proto.ValueStream stream = 3;
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stream(i), target);
  }
  
  // repeated .openinstrument.proto.StreamVariable variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variable(i), target);
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 5;
  for (int i = 0; i < this->timer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->timer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string errormessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  // repeated .openinstrument.proto.ValueStream stream = 3;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }
  
  // repeated .openinstrument.proto.StreamVariable variable = 4;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }
  
  // repeated .openinstrument.proto.LogMessage timer = 5;
  total_size += 1 * this->timer_size();
  for (int i = 0; i < this->timer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListResponse::MergeFrom(const ListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  variable_.MergeFrom(from.variable_);
  timer_.MergeFrom(from.timer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResponse::CopyFrom(const ListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < stream_size(); i++) {
    if (!this->stream(i).IsInitialized()) return false;
  }
  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  return true;
}

void ListResponse::Swap(ListResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    stream_.Swap(&other->stream_);
    variable_.Swap(&other->variable_);
    timer_.Swap(&other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListResponse_descriptor_;
  metadata.reflection = ListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreFileHeaderIndex::kVariableFieldNumber;
const int StoreFileHeaderIndex::kOffsetFieldNumber;
const int StoreFileHeaderIndex::kNumValuesFieldNumber;
const int StoreFileHeaderIndex::kMinTimestampFieldNumber;
const int StoreFileHeaderIndex::kMaxTimestampFieldNumber;
#endif  // !_MSC_VER

StoreFileHeaderIndex::StoreFileHeaderIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreFileHeaderIndex::InitAsDefaultInstance() {
  variable_ = const_cast< ::openinstrument::proto::StreamVariable*>(&::openinstrument::proto::StreamVariable::default_instance());
}

StoreFileHeaderIndex::StoreFileHeaderIndex(const StoreFileHeaderIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreFileHeaderIndex::SharedCtor() {
  _cached_size_ = 0;
  variable_ = NULL;
  offset_ = GOOGLE_ULONGLONG(0);
  num_values_ = 0u;
  min_timestamp_ = GOOGLE_ULONGLONG(0);
  max_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreFileHeaderIndex::~StoreFileHeaderIndex() {
  SharedDtor();
}

void StoreFileHeaderIndex::SharedDtor() {
  if (this != default_instance_) {
    delete variable_;
  }
}

void StoreFileHeaderIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreFileHeaderIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreFileHeaderIndex_descriptor_;
}

const StoreFileHeaderIndex& StoreFileHeaderIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StoreFileHeaderIndex* StoreFileHeaderIndex::default_instance_ = NULL;

StoreFileHeaderIndex* StoreFileHeaderIndex::New() const {
  return new StoreFileHeaderIndex;
}

void StoreFileHeaderIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_variable()) {
      if (variable_ != NULL) variable_->::openinstrument::proto::StreamVariable::Clear();
    }
    offset_ = GOOGLE_ULONGLONG(0);
    num_values_ = 0u;
    min_timestamp_ = GOOGLE_ULONGLONG(0);
    max_timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreFileHeaderIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .openinstrument.proto.StreamVariable variable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_offset;
        break;
      }
      
      // required fixed64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_num_values;
        break;
      }
      
      // optional fixed32 num_values = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_num_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &num_values_)));
          set_has_num_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_min_timestamp;
        break;
      }
      
      // optional fixed64 min_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &min_timestamp_)));
          set_has_min_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_max_timestamp;
        break;
      }
      
      // optional fixed64 max_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_timestamp_)));
          set_has_max_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreFileHeaderIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .openinstrument.proto.StreamVariable variable = 1;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variable(), output);
  }
  
  // required fixed64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->offset(), output);
  }
  
  // optional fixed32 num_values = 3 [default = 0];
  if (has_num_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->num_values(), output);
  }
  
  // optional fixed64 min_timestamp = 4;
  if (has_min_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->min_timestamp(), output);
  }
  
  // optional fixed64 max_timestamp = 5;
  if (has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->max_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreFileHeaderIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .openinstrument.proto.StreamVariable variable = 1;
  if (has_variable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->variable(), target);
  }
  
  // required fixed64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->offset(), target);
  }
  
  // optional fixed32 num_values = 3 [default = 0];
  if (has_num_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->num_values(), target);
  }
  
  // optional fixed64 min_timestamp = 4;
  if (has_min_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->min_timestamp(), target);
  }
  
  // optional fixed64 max_timestamp = 5;
  if (has_max_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->max_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreFileHeaderIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .openinstrument.proto.StreamVariable variable = 1;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variable());
    }
    
    // required fixed64 offset = 2;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 num_values = 3 [default = 0];
    if (has_num_values()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 min_timestamp = 4;
    if (has_min_timestamp()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 max_timestamp = 5;
    if (has_max_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreFileHeaderIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreFileHeaderIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreFileHeaderIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreFileHeaderIndex::MergeFrom(const StoreFileHeaderIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_variable()) {
      mutable_variable()->::openinstrument::proto::StreamVariable::MergeFrom(from.variable());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_num_values()) {
      set_num_values(from.num_values());
    }
    if (from.has_min_timestamp()) {
      set_min_timestamp(from.min_timestamp());
    }
    if (from.has_max_timestamp()) {
      set_max_timestamp(from.max_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreFileHeaderIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreFileHeaderIndex::CopyFrom(const StoreFileHeaderIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreFileHeaderIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_variable()) {
    if (!this->variable().IsInitialized()) return false;
  }
  return true;
}

void StoreFileHeaderIndex::Swap(StoreFileHeaderIndex* other) {
  if (other != this) {
    std::swap(variable_, other->variable_);
    std::swap(offset_, other->offset_);
    std::swap(num_values_, other->num_values_);
    std::swap(min_timestamp_, other->min_timestamp_);
    std::swap(max_timestamp_, other->max_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreFileHeaderIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreFileHeaderIndex_descriptor_;
  metadata.reflection = StoreFileHeaderIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompactionLog::kStartTimeFieldNumber;
const int CompactionLog::kEndTimeFieldNumber;
const int CompactionLog::kLogFieldNumber;
const int CompactionLog::kOldStreamsFieldNumber;
const int CompactionLog::kOldValuesFieldNumber;
const int CompactionLog::kLogStreamsFieldNumber;
const int CompactionLog::kLogValuesFieldNumber;
const int CompactionLog::kOutStreamsFieldNumber;
const int CompactionLog::kOutValuesFieldNumber;
const int CompactionLog::kInputFilenameFieldNumber;
const int CompactionLog::kOutputFilenameFieldNumber;
#endif  // !_MSC_VER

CompactionLog::CompactionLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompactionLog::InitAsDefaultInstance() {
}

CompactionLog::CompactionLog(const CompactionLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompactionLog::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  old_streams_ = GOOGLE_ULONGLONG(0);
  old_values_ = GOOGLE_ULONGLONG(0);
  log_streams_ = GOOGLE_ULONGLONG(0);
  log_values_ = GOOGLE_ULONGLONG(0);
  out_streams_ = GOOGLE_ULONGLONG(0);
  out_values_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactionLog::~CompactionLog() {
  SharedDtor();
}

void CompactionLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactionLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactionLog_descriptor_;
}

const CompactionLog& CompactionLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

CompactionLog* CompactionLog::default_instance_ = NULL;

CompactionLog* CompactionLog::New() const {
  return new CompactionLog;
}

void CompactionLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    old_streams_ = GOOGLE_ULONGLONG(0);
    old_values_ = GOOGLE_ULONGLONG(0);
    log_streams_ = GOOGLE_ULONGLONG(0);
    log_values_ = GOOGLE_ULONGLONG(0);
    out_streams_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    out_values_ = GOOGLE_ULONGLONG(0);
  }
  log_.Clear();
  input_filename_.Clear();
  output_filename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactionLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }
      
      // optional uint64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // repeated .openinstrument.proto.LogMessage log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectTag(32)) goto parse_old_streams;
        break;
      }
      
      // optional uint64 old_streams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_streams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_streams_)));
          set_has_old_streams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_values;
        break;
      }
      
      // optional uint64 old_values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_values_)));
          set_has_old_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_log_streams;
        break;
      }
      
      // optional uint64 log_streams = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_streams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_streams_)));
          set_has_log_streams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_values;
        break;
      }
      
      // optional uint64 log_values = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_values_)));
          set_has_log_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_out_streams;
        break;
      }
      
      // optional uint64 out_streams = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_streams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_streams_)));
          set_has_out_streams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_out_values;
        break;
      }
      
      // optional uint64 out_values = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_values_)));
          set_has_out_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_input_filename;
        break;
      }
      
      // repeated string input_filename = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_filename(0).data(), this->input_filename(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_input_filename;
        if (input->ExpectTag(90)) goto parse_output_filename;
        break;
      }
      
      // repeated string output_filename = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_filename(0).data(), this->output_filename(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_output_filename;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompactionLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_time(), output);
  }
  
  // optional uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }
  
  // repeated .openinstrument.proto.LogMessage log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }
  
  // optional uint64 old_streams = 4;
  if (has_old_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->old_streams(), output);
  }
  
  // optional uint64 old_values = 5;
  if (has_old_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->old_values(), output);
  }
  
  // optional uint64 log_streams = 6;
  if (has_log_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->log_streams(), output);
  }
  
  // optional uint64 log_values = 7;
  if (has_log_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->log_values(), output);
  }
  
  // optional uint64 out_streams = 8;
  if (has_out_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->out_streams(), output);
  }
  
  // optional uint64 out_values = 9;
  if (has_out_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->out_values(), output);
  }
  
  // repeated string input_filename = 10;
  for (int i = 0; i < this->input_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->input_filename(i).data(), this->input_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->input_filename(i), output);
  }
  
  // repeated string output_filename = 11;
  for (int i = 0; i < this->output_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->output_filename(i).data(), this->output_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->output_filename(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompactionLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_time(), target);
  }
  
  // optional uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }
  
  // repeated .openinstrument.proto.LogMessage log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }
  
  // optional uint64 old_streams = 4;
  if (has_old_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->old_streams(), target);
  }
  
  // optional uint64 old_values = 5;
  if (has_old_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->old_values(), target);
  }
  
  // optional uint64 log_streams = 6;
  if (has_log_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->log_streams(), target);
  }
  
  // optional uint64 log_values = 7;
  if (has_log_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->log_values(), target);
  }
  
  // optional uint64 out_streams = 8;
  if (has_out_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->out_streams(), target);
  }
  
  // optional uint64 out_values = 9;
  if (has_out_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->out_values(), target);
  }
  
  // repeated string input_filename = 10;
  for (int i = 0; i < this->input_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_filename(i).data(), this->input_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->input_filename(i), target);
  }
  
  // repeated string output_filename = 11;
  for (int i = 0; i < this->output_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_filename(i).data(), this->output_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->output_filename(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompactionLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }
    
    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }
    
    // optional uint64 old_streams = 4;
    if (has_old_streams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_streams());
    }
    
    // optional uint64 old_values = 5;
    if (has_old_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_values());
    }
    
    // optional uint64 log_streams = 6;
    if (has_log_streams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_streams());
    }
    
    // optional uint64 log_values = 7;
    if (has_log_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_values());
    }
    
    // optional uint64 out_streams = 8;
    if (has_out_streams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_streams());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 out_values = 9;
    if (has_out_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_values());
    }
    
  }
  // repeated .openinstrument.proto.LogMessage log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  // repeated string input_filename = 10;
  total_size += 1 * this->input_filename_size();
  for (int i = 0; i < this->input_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_filename(i));
  }
  
  // repeated string output_filename = 11;
  total_size += 1 * this->output_filename_size();
  for (int i = 0; i < this->output_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output_filename(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactionLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactionLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactionLog::MergeFrom(const CompactionLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  input_filename_.MergeFrom(from.input_filename_);
  output_filename_.MergeFrom(from.output_filename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_old_streams()) {
      set_old_streams(from.old_streams());
    }
    if (from.has_old_values()) {
      set_old_values(from.old_values());
    }
    if (from.has_log_streams()) {
      set_log_streams(from.log_streams());
    }
    if (from.has_log_values()) {
      set_log_values(from.log_values());
    }
    if (from.has_out_streams()) {
      set_out_streams(from.out_streams());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_out_values()) {
      set_out_values(from.out_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactionLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionLog::CopyFrom(const CompactionLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionLog::IsInitialized() const {
  
  return true;
}

void CompactionLog::Swap(CompactionLog* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    log_.Swap(&other->log_);
    std::swap(old_streams_, other->old_streams_);
    std::swap(old_values_, other->old_values_);
    std::swap(log_streams_, other->log_streams_);
    std::swap(log_values_, other->log_values_);
    std::swap(out_streams_, other->out_streams_);
    std::swap(out_values_, other->out_values_);
    input_filename_.Swap(&other->input_filename_);
    output_filename_.Swap(&other->output_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactionLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactionLog_descriptor_;
  metadata.reflection = CompactionLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreFileHeader::kVersionFieldNumber;
const int StoreFileHeader::kStartTimestampFieldNumber;
const int StoreFileHeader::kEndTimestampFieldNumber;
const int StoreFileHeader::kVariableFieldNumber;
const int StoreFileHeader::kIndexFieldNumber;
const int StoreFileHeader::kEndKeyFieldNumber;
const int StoreFileHeader::kFooterPositionFieldNumber;
#endif  // !_MSC_VER

StoreFileHeader::StoreFileHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreFileHeader::InitAsDefaultInstance() {
}

StoreFileHeader::StoreFileHeader(const StoreFileHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreFileHeader::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1u;
  start_timestamp_ = GOOGLE_ULONGLONG(0);
  end_timestamp_ = GOOGLE_ULONGLONG(0);
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  footer_position_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreFileHeader::~StoreFileHeader() {
  SharedDtor();
}

void StoreFileHeader::SharedDtor() {
  if (end_key_ != &::google::protobuf::internal::kEmptyString) {
    delete end_key_;
  }
  if (this != default_instance_) {
  }
}

void StoreFileHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreFileHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreFileHeader_descriptor_;
}

const StoreFileHeader& StoreFileHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StoreFileHeader* StoreFileHeader::default_instance_ = NULL;

StoreFileHeader* StoreFileHeader::New() const {
  return new StoreFileHeader;
}

void StoreFileHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1u;
    start_timestamp_ = GOOGLE_ULONGLONG(0);
    end_timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::kEmptyString) {
        end_key_->clear();
      }
    }
    footer_position_ = GOOGLE_ULONGLONG(0);
  }
  variable_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
          set_has_start_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_timestamp;
        break;
      }
      
      // optional uint64 end_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_)));
          set_has_end_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        break;
      }
      
      // repeated .openinstrument.proto.StreamVariable variable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        if (input->ExpectTag(42)) goto parse_index;
        break;
      }
      
      // repeated .openinstrument.proto.StoreFileHeaderIndex index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_index;
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_key;
        break;
      }
      
      // optional string end_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_key().data(), this->end_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_footer_position;
        break;
      }
      
      // optional fixed64 footer_position = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_footer_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &footer_position_)));
          set_has_footer_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 start_timestamp = 1;
  if (has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }
  
  // optional uint64 end_timestamp = 2;
  if (has_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_timestamp(), output);
  }
  
  // repeated .openinstrument.proto.StreamVariable variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variable(i), output);
  }
  
  // repeated .openinstrument.proto.StoreFileHeaderIndex index = 5;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->index(i), output);
  }
  
  // optional uint32 version = 6 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }
  
  // optional string end_key = 7;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_key().data(), this->end_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->end_key(), output);
  }
  
  // optional fixed64 footer_position = 9;
  if (has_footer_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->footer_position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreFileHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 start_timestamp = 1;
  if (has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }
  
  // optional uint64 end_timestamp = 2;
  if (has_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_timestamp(), target);
  }
  
  // repeated .openinstrument.proto.StreamVariable variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variable(i), target);
  }
  
  // repeated .openinstrument.proto.StoreFileHeaderIndex index = 5;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->index(i), target);
  }
  
  // optional uint32 version = 6 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }
  
  // optional string end_key = 7;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_key().data(), this->end_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->end_key(), target);
  }
  
  // optional fixed64 footer_position = 9;
  if (has_footer_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->footer_position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreFileHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 6 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint64 start_timestamp = 1;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_timestamp());
    }
    
    // optional uint64 end_timestamp = 2;
    if (has_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_timestamp());
    }
    
    // optional string end_key = 7;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_key());
    }
    
    // optional fixed64 footer_position = 9;
    if (has_footer_position()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .openinstrument.proto.StreamVariable variable = 4;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }
  
  // repeated .openinstrument.proto.StoreFileHeaderIndex index = 5;
  total_size += 1 * this->index_size();
  for (int i = 0; i < this->index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreFileHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreFileHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreFileHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreFileHeader::MergeFrom(const StoreFileHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_start_timestamp()) {
      set_start_timestamp(from.start_timestamp());
    }
    if (from.has_end_timestamp()) {
      set_end_timestamp(from.end_timestamp());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
    if (from.has_footer_position()) {
      set_footer_position(from.footer_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreFileHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreFileHeader::CopyFrom(const StoreFileHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreFileHeader::IsInitialized() const {
  
  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < index_size(); i++) {
    if (!this->index(i).IsInitialized()) return false;
  }
  return true;
}

void StoreFileHeader::Swap(StoreFileHeader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(start_timestamp_, other->start_timestamp_);
    std::swap(end_timestamp_, other->end_timestamp_);
    variable_.Swap(&other->variable_);
    index_.Swap(&other->index_);
    std::swap(end_key_, other->end_key_);
    std::swap(footer_position_, other->footer_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreFileHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreFileHeader_descriptor_;
  metadata.reflection = StoreFileHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreFileFooter::kCompactionLogFieldNumber;
#endif  // !_MSC_VER

StoreFileFooter::StoreFileFooter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreFileFooter::InitAsDefaultInstance() {
}

StoreFileFooter::StoreFileFooter(const StoreFileFooter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreFileFooter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreFileFooter::~StoreFileFooter() {
  SharedDtor();
}

void StoreFileFooter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreFileFooter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreFileFooter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreFileFooter_descriptor_;
}

const StoreFileFooter& StoreFileFooter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StoreFileFooter* StoreFileFooter::default_instance_ = NULL;

StoreFileFooter* StoreFileFooter::New() const {
  return new StoreFileFooter;
}

void StoreFileFooter::Clear() {
  compaction_log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreFileFooter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openinstrument.proto.CompactionLog compaction_log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compaction_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compaction_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_compaction_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreFileFooter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .openinstrument.proto.CompactionLog compaction_log = 1;
  for (int i = 0; i < this->compaction_log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compaction_log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreFileFooter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .openinstrument.proto.CompactionLog compaction_log = 1;
  for (int i = 0; i < this->compaction_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->compaction_log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreFileFooter::ByteSize() const {
  int total_size = 0;
  
  // repeated .openinstrument.proto.CompactionLog compaction_log = 1;
  total_size += 1 * this->compaction_log_size();
  for (int i = 0; i < this->compaction_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compaction_log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreFileFooter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreFileFooter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreFileFooter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreFileFooter::MergeFrom(const StoreFileFooter& from) {
  GOOGLE_CHECK_NE(&from, this);
  compaction_log_.MergeFrom(from.compaction_log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreFileFooter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreFileFooter::CopyFrom(const StoreFileFooter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreFileFooter::IsInitialized() const {
  
  return true;
}

void StoreFileFooter::Swap(StoreFileFooter* other) {
  if (other != this) {
    compaction_log_.Swap(&other->compaction_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreFileFooter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreFileFooter_descriptor_;
  metadata.reflection = StoreFileFooter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RetentionPolicyItem_Target_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetentionPolicyItem_Target_descriptor_;
}
bool RetentionPolicyItem_Target_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RetentionPolicyItem_Target RetentionPolicyItem::KEEP;
const RetentionPolicyItem_Target RetentionPolicyItem::DROP;
const RetentionPolicyItem_Target RetentionPolicyItem::Target_MIN;
const RetentionPolicyItem_Target RetentionPolicyItem::Target_MAX;
const int RetentionPolicyItem::Target_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RetentionPolicyItem::kVariableFieldNumber;
const int RetentionPolicyItem::kCommentFieldNumber;
const int RetentionPolicyItem::kPolicyFieldNumber;
const int RetentionPolicyItem::kMutationFieldNumber;
const int RetentionPolicyItem::kMinAgeFieldNumber;
const int RetentionPolicyItem::kMaxAgeFieldNumber;
#endif  // !_MSC_VER

RetentionPolicyItem::RetentionPolicyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetentionPolicyItem::InitAsDefaultInstance() {
}

RetentionPolicyItem::RetentionPolicyItem(const RetentionPolicyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetentionPolicyItem::SharedCtor() {
  _cached_size_ = 0;
  policy_ = 1;
  min_age_ = GOOGLE_ULONGLONG(0);
  max_age_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetentionPolicyItem::~RetentionPolicyItem() {
  SharedDtor();
}

void RetentionPolicyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetentionPolicyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetentionPolicyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetentionPolicyItem_descriptor_;
}

const RetentionPolicyItem& RetentionPolicyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

RetentionPolicyItem* RetentionPolicyItem::default_instance_ = NULL;

RetentionPolicyItem* RetentionPolicyItem::New() const {
  return new RetentionPolicyItem;
}

void RetentionPolicyItem::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    policy_ = 1;
    min_age_ = GOOGLE_ULONGLONG(0);
    max_age_ = GOOGLE_ULONGLONG(0);
  }
  variable_.Clear();
  comment_.Clear();
  mutation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetentionPolicyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openinstrument.proto.StreamVariable variable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_variable;
        if (input->ExpectTag(18)) goto parse_comment;
        break;
      }
      
      // repeated string comment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment(0).data(), this->comment(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment;
        if (input->ExpectTag(24)) goto parse_policy;
        break;
      }
      
      // required .openinstrument.proto.RetentionPolicyItem.Target policy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_policy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openinstrument::proto::RetentionPolicyItem_Target_IsValid(value)) {
            set_policy(static_cast< ::openinstrument::proto::RetentionPolicyItem_Target >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mutation;
        break;
      }
      
      // repeated .openinstrument.proto.StreamMutation mutation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mutation;
        if (input->ExpectTag(40)) goto parse_min_age;
        break;
      }
      
      // optional uint64 min_age = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_age_)));
          set_has_min_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_age;
        break;
      }
      
      // optional uint64 max_age = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_age_)));
          set_has_max_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetentionPolicyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .openinstrument.proto.StreamVariable variable = 1;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variable(i), output);
  }
  
  // repeated string comment = 2;
  for (int i = 0; i < this->comment_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->comment(i).data(), this->comment(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->comment(i), output);
  }
  
  // required .openinstrument.proto.RetentionPolicyItem.Target policy = 3;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->policy(), output);
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 4;
  for (int i = 0; i < this->mutation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mutation(i), output);
  }
  
  // optional uint64 min_age = 5 [default = 0];
  if (has_min_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->min_age(), output);
  }
  
  // optional uint64 max_age = 6 [default = 0];
  if (has_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->max_age(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetentionPolicyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .openinstrument.proto.StreamVariable variable = 1;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->variable(i), target);
  }
  
  // repeated string comment = 2;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment(i).data(), this->comment(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->comment(i), target);
  }
  
  // required .openinstrument.proto.RetentionPolicyItem.Target policy = 3;
  if (has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->policy(), target);
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 4;
  for (int i = 0; i < this->mutation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mutation(i), target);
  }
  
  // optional uint64 min_age = 5 [default = 0];
  if (has_min_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->min_age(), target);
  }
  
  // optional uint64 max_age = 6 [default = 0];
  if (has_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->max_age(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetentionPolicyItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .openinstrument.proto.RetentionPolicyItem.Target policy = 3;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->policy());
    }
    
    // optional uint64 min_age = 5 [default = 0];
    if (has_min_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_age());
    }
    
    // optional uint64 max_age = 6 [default = 0];
    if (has_max_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_age());
    }
    
  }
  // repeated .openinstrument.proto.StreamVariable variable = 1;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }
  
  // repeated string comment = 2;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->comment(i));
  }
  
  // repeated .openinstrument.proto.StreamMutation mutation = 4;
  total_size += 1 * this->mutation_size();
  for (int i = 0; i < this->mutation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetentionPolicyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetentionPolicyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetentionPolicyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetentionPolicyItem::MergeFrom(const RetentionPolicyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  comment_.MergeFrom(from.comment_);
  mutation_.MergeFrom(from.mutation_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_policy()) {
      set_policy(from.policy());
    }
    if (from.has_min_age()) {
      set_min_age(from.min_age());
    }
    if (from.has_max_age()) {
      set_max_age(from.max_age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetentionPolicyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetentionPolicyItem::CopyFrom(const RetentionPolicyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetentionPolicyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mutation_size(); i++) {
    if (!this->mutation(i).IsInitialized()) return false;
  }
  return true;
}

void RetentionPolicyItem::Swap(RetentionPolicyItem* other) {
  if (other != this) {
    variable_.Swap(&other->variable_);
    comment_.Swap(&other->comment_);
    std::swap(policy_, other->policy_);
    mutation_.Swap(&other->mutation_);
    std::swap(min_age_, other->min_age_);
    std::swap(max_age_, other->max_age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetentionPolicyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetentionPolicyItem_descriptor_;
  metadata.reflection = RetentionPolicyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetentionPolicy::kPolicyFieldNumber;
const int RetentionPolicy::kIntervalFieldNumber;
#endif  // !_MSC_VER

RetentionPolicy::RetentionPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetentionPolicy::InitAsDefaultInstance() {
}

RetentionPolicy::RetentionPolicy(const RetentionPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetentionPolicy::SharedCtor() {
  _cached_size_ = 0;
  interval_ = 600u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetentionPolicy::~RetentionPolicy() {
  SharedDtor();
}

void RetentionPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetentionPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetentionPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetentionPolicy_descriptor_;
}

const RetentionPolicy& RetentionPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

RetentionPolicy* RetentionPolicy::default_instance_ = NULL;

RetentionPolicy* RetentionPolicy::New() const {
  return new RetentionPolicy;
}

void RetentionPolicy::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    interval_ = 600u;
  }
  policy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetentionPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openinstrument.proto.RetentionPolicyItem policy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_policy;
        if (input->ExpectTag(16)) goto parse_interval;
        break;
      }
      
      // optional uint32 interval = 2 [default = 600];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetentionPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .openinstrument.proto.RetentionPolicyItem policy = 1;
  for (int i = 0; i < this->policy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->policy(i), output);
  }
  
  // optional uint32 interval = 2 [default = 600];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetentionPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .openinstrument.proto.RetentionPolicyItem policy = 1;
  for (int i = 0; i < this->policy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->policy(i), target);
  }
  
  // optional uint32 interval = 2 [default = 600];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetentionPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 interval = 2 [default = 600];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }
    
  }
  // repeated .openinstrument.proto.RetentionPolicyItem policy = 1;
  total_size += 1 * this->policy_size();
  for (int i = 0; i < this->policy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->policy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetentionPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetentionPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetentionPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetentionPolicy::MergeFrom(const RetentionPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  policy_.MergeFrom(from.policy_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetentionPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetentionPolicy::CopyFrom(const RetentionPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetentionPolicy::IsInitialized() const {
  
  for (int i = 0; i < policy_size(); i++) {
    if (!this->policy(i).IsInitialized()) return false;
  }
  return true;
}

void RetentionPolicy::Swap(RetentionPolicy* other) {
  if (other != this) {
    policy_.Swap(&other->policy_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetentionPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetentionPolicy_descriptor_;
  metadata.reflection = RetentionPolicy_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StoreServer_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreServer_State_descriptor_;
}
bool StoreServer_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StoreServer_State StoreServer::UNKNOWN;
const StoreServer_State StoreServer::LOAD;
const StoreServer_State StoreServer::RUN;
const StoreServer_State StoreServer::DRAIN;
const StoreServer_State StoreServer::READONLY;
const StoreServer_State StoreServer::SHUTDOWN;
const StoreServer_State StoreServer::State_MIN;
const StoreServer_State StoreServer::State_MAX;
const int StoreServer::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StoreServer::kAddressFieldNumber;
const int StoreServer::kStateFieldNumber;
const int StoreServer::kLastUpdatedFieldNumber;
const int StoreServer::kNameFieldNumber;
const int StoreServer::kTargetIndexedFileSizeFieldNumber;
#endif  // !_MSC_VER

StoreServer::StoreServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreServer::InitAsDefaultInstance() {
}

StoreServer::StoreServer(const StoreServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreServer::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  last_updated_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_indexed_file_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreServer::~StoreServer() {
  SharedDtor();
}

void StoreServer::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StoreServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreServer_descriptor_;
}

const StoreServer& StoreServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StoreServer* StoreServer::default_instance_ = NULL;

StoreServer* StoreServer::New() const {
  return new StoreServer;
}

void StoreServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    state_ = 0;
    last_updated_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    target_indexed_file_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional .openinstrument.proto.StoreServer.State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openinstrument::proto::StoreServer_State_IsValid(value)) {
            set_state(static_cast< ::openinstrument::proto::StoreServer_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_updated;
        break;
      }
      
      // optional uint64 last_updated = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_updated_)));
          set_has_last_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_indexed_file_size;
        break;
      }
      
      // optional uint64 target_indexed_file_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_indexed_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_indexed_file_size_)));
          set_has_target_indexed_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }
  
  // optional .openinstrument.proto.StoreServer.State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional uint64 last_updated = 3;
  if (has_last_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_updated(), output);
  }
  
  // optional uint64 target_indexed_file_size = 4;
  if (has_target_indexed_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_indexed_file_size(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }
  
  // optional .openinstrument.proto.StoreServer.State state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional uint64 last_updated = 3;
  if (has_last_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_updated(), target);
  }
  
  // optional uint64 target_indexed_file_size = 4;
  if (has_target_indexed_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_indexed_file_size(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional .openinstrument.proto.StoreServer.State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional uint64 last_updated = 3;
    if (has_last_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_updated());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint64 target_indexed_file_size = 4;
    if (has_target_indexed_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_indexed_file_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreServer::MergeFrom(const StoreServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_last_updated()) {
      set_last_updated(from.last_updated());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_target_indexed_file_size()) {
      set_target_indexed_file_size(from.target_indexed_file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreServer::CopyFrom(const StoreServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StoreServer::Swap(StoreServer* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(state_, other->state_);
    std::swap(last_updated_, other->last_updated_);
    std::swap(name_, other->name_);
    std::swap(target_indexed_file_size_, other->target_indexed_file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreServer_descriptor_;
  metadata.reflection = StoreServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreConfig::kServerFieldNumber;
const int StoreConfig::kRetentionPolicyFieldNumber;
#endif  // !_MSC_VER

StoreConfig::StoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreConfig::InitAsDefaultInstance() {
  retention_policy_ = const_cast< ::openinstrument::proto::RetentionPolicy*>(&::openinstrument::proto::RetentionPolicy::default_instance());
}

StoreConfig::StoreConfig(const StoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreConfig::SharedCtor() {
  _cached_size_ = 0;
  retention_policy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreConfig::~StoreConfig() {
  SharedDtor();
}

void StoreConfig::SharedDtor() {
  if (this != default_instance_) {
    delete retention_policy_;
  }
}

void StoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreConfig_descriptor_;
}

const StoreConfig& StoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openinstrument_2eproto();  return *default_instance_;
}

StoreConfig* StoreConfig::default_instance_ = NULL;

StoreConfig* StoreConfig::New() const {
  return new StoreConfig;
}

void StoreConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_retention_policy()) {
      if (retention_policy_ != NULL) retention_policy_->::openinstrument::proto::RetentionPolicy::Clear();
    }
  }
  server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openinstrument.proto.StoreServer server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server;
        if (input->ExpectTag(18)) goto parse_retention_policy;
        break;
      }
      
      // optional .openinstrument.proto.RetentionPolicy retention_policy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retention_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retention_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .openinstrument.proto.StoreServer server = 1;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(i), output);
  }
  
  // optional .openinstrument.proto.RetentionPolicy retention_policy = 2;
  if (has_retention_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->retention_policy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .openinstrument.proto.StoreServer server = 1;
  for (int i = 0; i < this->server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(i), target);
  }
  
  // optional .openinstrument.proto.RetentionPolicy retention_policy = 2;
  if (has_retention_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->retention_policy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .openinstrument.proto.RetentionPolicy retention_policy = 2;
    if (has_retention_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retention_policy());
    }
    
  }
  // repeated .openinstrument.proto.StoreServer server = 1;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreConfig::MergeFrom(const StoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_.MergeFrom(from.server_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_retention_policy()) {
      mutable_retention_policy()->::openinstrument::proto::RetentionPolicy::MergeFrom(from.retention_policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreConfig::CopyFrom(const StoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreConfig::IsInitialized() const {
  
  for (int i = 0; i < server_size(); i++) {
    if (!this->server(i).IsInitialized()) return false;
  }
  if (has_retention_policy()) {
    if (!this->retention_policy().IsInitialized()) return false;
  }
  return true;
}

void StoreConfig::Swap(StoreConfig* other) {
  if (other != this) {
    server_.Swap(&other->server_);
    std::swap(retention_policy_, other->retention_policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreConfig_descriptor_;
  metadata.reflection = StoreConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace openinstrument

// @@protoc_insertion_point(global_scope)
