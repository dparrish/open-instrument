package openinstrument.proto;

message Label {
  required string label = 1;
  optional string value = 2;
}

message StreamVariable {
  enum ValueType {
    UNKNOWN = 0;
    GAUGE = 1;
    RATE = 2;
  }
  required string name = 1;
  repeated Label label = 2;
  optional ValueType type = 3;
}

message StreamMutation {
  enum SampleType {
    // Do not modify the data at all
    NONE = 0;
    // Average out values between each sampling point
    AVERAGE = 1;
    // Get the maximum value between each sampling point
    MAX = 2;
    // Get the minimum value between each sampling point
    MIN = 3;
    // Get the non-negative rate between each sampling point
    RATE = 4;
    // Get the (possibly) negative rate between each sampling point
    RATE_SIGNED = 5;
    // Difference between each point
    DELTA = 6;
    // Latest point
    LATEST = 7;
  }
  required SampleType sample_type = 1;

  // Stretch or compress the stream so that there is a value every <sample_frequency> ms.
  // Extra values between each sample will be aggregated according to <sample_type>.
  // Gaps in the stream less than <max_gap_interpolate> samples will be filled with interpolated values between the
  // closest real values.
  // Gaps in the stream of more than <max_gap_interpolate> samples will not be filled.
  optional uint32 sample_frequency = 2;
  optional uint32 max_gap_interpolate = 3 [ default = 1 ];
}

message StreamAggregation {
  enum AggregateType {
    AVERAGE = 0;
    MAX = 1;
    MIN = 2;
    MEDIAN = 3;
    SUM = 4;
  }
  required AggregateType type = 1;

  // Labels to aggregate by on the input streams. If no labels are specified, aggregation will be done on the variable
  // only.
  repeated string label = 2;

  // Points will be aggregated if they are less than sample_interval ms apart. Default is 30 seconds.
  optional uint32 sample_interval = 3 [ default = 30000 ];
}

message Value {
  // Milliseconds since epoch
  required uint64 timestamp = 1;
  optional double double_value = 2;
  optional string string_value = 3;

  // Used for run-length encoding
  optional uint64 end_timestamp = 4;
}

message ValueStream {
  optional string DEPRECATED_string_variable = 1;
  optional StreamVariable variable = 2;
  repeated Value value = 4;
}

message GetRequest {
  optional string DEPRECATED_string_variable = 1;
  optional StreamVariable variable = 9;

  // Milliseconds since epoch
  optional uint64 min_timestamp = 2;
  optional uint64 max_timestamp = 3;

  // If mutations or aggregations are supplied, the GetResponse will have a separate stream for each change requested.
  repeated StreamMutation mutation = 6;
  repeated StreamAggregation aggregation = 7;

  // Limit to how many variables can be returned in a standard GetRequest. This can be overridden if required.
  optional uint32 max_variables = 8 [ default = 100 ];

  // This request has been forwarded by another store server and should not be forwarded again.
  // This shouldn't happen but is here as a failsafe.
  optional bool forwarded = 10 [ default = false ];
}

message GetResponse {
  required bool success = 1;
  optional string errormessage = 2;

  // Contains a separate stream for every mutation requested in GetRequest, in the same order. If no mutations are
  // requested, the response will contain a single stream of the raw data.
  repeated ValueStream stream = 3;
}

message AddRequest {
  repeated ValueStream stream = 1;

  // This request has been forwarded by another store server and should not be forwarded again.
  // This shouldn't happen but is here as a failsafe.
  optional bool forwarded = 2 [ default = false ];
}

message AddResponse {
  required bool success = 1;
  optional string errormessage = 2;
}

message ListRequest {
  optional string DEPRECATED_string_prefix = 1;
  optional StreamVariable prefix = 3;

  // Limit to how many variables can be returned in a standard ListRequest. This can be overridden if required.
  optional uint32 max_variables = 2 [ default = 100 ];
}

message ListResponse {
  required bool success = 1;
  optional string errormessage = 2;

  // Although this uses the ValueStream for returning a list of variables, the expectation is that the value field is
  // empty.
  repeated ValueStream stream = 3;
}

message StoreFileHeaderIndex {
  required StreamVariable variable = 1;
  required fixed64 offset = 2;
}

message StoreFileHeader {
  required uint64 start_timestamp = 1;
  required uint64 end_timestamp = 2;
  repeated string DEPRECATED_string_variable = 3;
  repeated StreamVariable variable = 4;
  repeated StoreFileHeaderIndex index = 5;
}


message RetentionPolicyItem {
  enum Target {
    KEEP = 1;
    DROP = 2;
  }
  repeated StreamVariable variable = 1;
  repeated string comment = 2;
  required Target policy = 3;

  repeated StreamMutation mutation = 4;
  optional uint64 min_age = 5 [ default = 0 ];
  optional uint64 max_age = 6 [ default = 0 ];
}

message RetentionPolicy {
  repeated RetentionPolicyItem policy = 1;
}

message StoreServer {
  enum State {
    UNKNOWN = 0;
    STARTING = 1;
    LOADING = 2;
    RUNNING = 3;
    READONLY = 4;
    DRAINING = 5;
    LAMEDUCK = 6;
    SHUTDOWN = 7;
  }
  required string address = 1;
  optional State state = 2;
  optional uint64 last_updated = 3;
}

message StoreConfig {
  repeated StoreServer server = 1;
  optional RetentionPolicy retention_policy = 2;
}
